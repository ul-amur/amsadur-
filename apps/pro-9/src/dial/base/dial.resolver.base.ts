/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Dial } from "./Dial";
import { DialCountArgs } from "./DialCountArgs";
import { DialFindManyArgs } from "./DialFindManyArgs";
import { DialFindUniqueArgs } from "./DialFindUniqueArgs";
import { CreateDialArgs } from "./CreateDialArgs";
import { UpdateDialArgs } from "./UpdateDialArgs";
import { DeleteDialArgs } from "./DeleteDialArgs";
import { Employee } from "../../employee/base/Employee";
import { DialService } from "../dial.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Dial)
export class DialResolverBase {
  constructor(
    protected readonly service: DialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "read",
    possession: "any",
  })
  async _dialsMeta(
    @graphql.Args() args: DialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dial])
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "read",
    possession: "any",
  })
  async dials(@graphql.Args() args: DialFindManyArgs): Promise<Dial[]> {
    return this.service.dials(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dial, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "read",
    possession: "own",
  })
  async dial(@graphql.Args() args: DialFindUniqueArgs): Promise<Dial | null> {
    const result = await this.service.dial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dial)
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "create",
    possession: "any",
  })
  async createDial(@graphql.Args() args: CreateDialArgs): Promise<Dial> {
    return await this.service.createDial({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dial)
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "update",
    possession: "any",
  })
  async updateDial(@graphql.Args() args: UpdateDialArgs): Promise<Dial | null> {
    try {
      return await this.service.updateDial({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dial)
  @nestAccessControl.UseRoles({
    resource: "Dial",
    action: "delete",
    possession: "any",
  })
  async deleteDial(@graphql.Args() args: DeleteDialArgs): Promise<Dial | null> {
    try {
      return await this.service.deleteDial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(@graphql.Parent() parent: Dial): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
