/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dial as PrismaDial,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class DialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DialCountArgs, "select">): Promise<number> {
    return this.prisma.dial.count(args);
  }

  async dials<T extends Prisma.DialFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DialFindManyArgs>
  ): Promise<PrismaDial[]> {
    return this.prisma.dial.findMany<Prisma.DialFindManyArgs>(args);
  }
  async dial<T extends Prisma.DialFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DialFindUniqueArgs>
  ): Promise<PrismaDial | null> {
    return this.prisma.dial.findUnique(args);
  }
  async createDial<T extends Prisma.DialCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DialCreateArgs>
  ): Promise<PrismaDial> {
    return this.prisma.dial.create<T>(args);
  }
  async updateDial<T extends Prisma.DialUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DialUpdateArgs>
  ): Promise<PrismaDial> {
    return this.prisma.dial.update<T>(args);
  }
  async deleteDial<T extends Prisma.DialDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DialDeleteArgs>
  ): Promise<PrismaDial> {
    return this.prisma.dial.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.dial
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
