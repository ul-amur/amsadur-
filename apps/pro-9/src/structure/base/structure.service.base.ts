/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Structure as PrismaStructure,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class StructureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StructureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.structure.count(args);
  }

  async structures<T extends Prisma.StructureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StructureFindManyArgs>
  ): Promise<PrismaStructure[]> {
    return this.prisma.structure.findMany<Prisma.StructureFindManyArgs>(args);
  }
  async structure<T extends Prisma.StructureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StructureFindUniqueArgs>
  ): Promise<PrismaStructure | null> {
    return this.prisma.structure.findUnique(args);
  }
  async createStructure<T extends Prisma.StructureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StructureCreateArgs>
  ): Promise<PrismaStructure> {
    return this.prisma.structure.create<T>(args);
  }
  async updateStructure<T extends Prisma.StructureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StructureUpdateArgs>
  ): Promise<PrismaStructure> {
    return this.prisma.structure.update<T>(args);
  }
  async deleteStructure<T extends Prisma.StructureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StructureDeleteArgs>
  ): Promise<PrismaStructure> {
    return this.prisma.structure.delete(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.structure
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }
}
