/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { DialCreateNestedManyWithoutEmployeesInput } from "./DialCreateNestedManyWithoutEmployeesInput";
import { DomiciliationWhereUniqueInput } from "../../domiciliation/base/DomiciliationWhereUniqueInput";
import { TransferWhereUniqueInput } from "../../transfer/base/TransferWhereUniqueInput";
import { EnumEmployeeSex } from "./EnumEmployeeSex";
import { StructureWhereUniqueInput } from "../../structure/base/StructureWhereUniqueInput";

@InputType()
class EmployeeCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthCountry?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthPlace?: string | null;

  @ApiProperty({
    required: true,
    type: () => DialCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => DialCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => DialCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  contacts?: DialCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => DomiciliationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DomiciliationWhereUniqueInput)
  @IsOptional()
  @Field(() => DomiciliationWhereUniqueInput, {
    nullable: true,
  })
  domiciliation?: DomiciliationWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  firstName!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  lastName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  names?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nationality?: string | null;

  @ApiProperty({
    required: false,
    type: () => TransferWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TransferWhereUniqueInput)
  @IsOptional()
  @Field(() => TransferWhereUniqueInput, {
    nullable: true,
  })
  relocation?: TransferWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumEmployeeSex,
  })
  @IsEnum(EnumEmployeeSex)
  @IsOptional()
  @Field(() => EnumEmployeeSex, {
    nullable: true,
  })
  sex?: "Homme" | "Femme" | "Inconnu" | null;

  @ApiProperty({
    required: false,
    type: () => StructureWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StructureWhereUniqueInput)
  @IsOptional()
  @Field(() => StructureWhereUniqueInput, {
    nullable: true,
  })
  structure?: StructureWhereUniqueInput | null;
}

export { EmployeeCreateInput as EmployeeCreateInput };
