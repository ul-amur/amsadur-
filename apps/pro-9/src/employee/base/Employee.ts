/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Dial } from "../../dial/base/Dial";
import { Domiciliation } from "../../domiciliation/base/Domiciliation";
import { Transfer } from "../../transfer/base/Transfer";
import { EnumEmployeeSex } from "./EnumEmployeeSex";
import { Structure } from "../../structure/base/Structure";

@ObjectType()
class Employee {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthCountry!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  birthPlace!: string | null;

  @ApiProperty({
    required: true,
    type: () => [Dial],
  })
  @ValidateNested()
  @Type(() => Dial)
  @IsOptional()
  contacts?: Array<Dial>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Domiciliation,
  })
  @ValidateNested()
  @Type(() => Domiciliation)
  @IsOptional()
  domiciliation?: Domiciliation | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  firstName!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  lastName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  names!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nationality!: string | null;

  @ApiProperty({
    required: false,
    type: () => Transfer,
  })
  @ValidateNested()
  @Type(() => Transfer)
  @IsOptional()
  relocation?: Transfer | null;

  @ApiProperty({
    required: false,
    enum: EnumEmployeeSex,
  })
  @IsEnum(EnumEmployeeSex)
  @IsOptional()
  @Field(() => EnumEmployeeSex, {
    nullable: true,
  })
  sex?: "Homme" | "Femme" | "Inconnu" | null;

  @ApiProperty({
    required: false,
    type: () => Structure,
  })
  @ValidateNested()
  @Type(() => Structure)
  @IsOptional()
  structure?: Structure | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Employee as Employee };
