/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Orientation as PrismaOrientation } from "@prisma/client";

export class OrientationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrientationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orientation.count(args);
  }

  async orientations<T extends Prisma.OrientationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrientationFindManyArgs>
  ): Promise<PrismaOrientation[]> {
    return this.prisma.orientation.findMany<Prisma.OrientationFindManyArgs>(
      args
    );
  }
  async orientation<T extends Prisma.OrientationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrientationFindUniqueArgs>
  ): Promise<PrismaOrientation | null> {
    return this.prisma.orientation.findUnique(args);
  }
  async createOrientation<T extends Prisma.OrientationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrientationCreateArgs>
  ): Promise<PrismaOrientation> {
    return this.prisma.orientation.create<T>(args);
  }
  async updateOrientation<T extends Prisma.OrientationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrientationUpdateArgs>
  ): Promise<PrismaOrientation> {
    return this.prisma.orientation.update<T>(args);
  }
  async deleteOrientation<T extends Prisma.OrientationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrientationDeleteArgs>
  ): Promise<PrismaOrientation> {
    return this.prisma.orientation.delete(args);
  }
}
