/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Orientation } from "./Orientation";
import { OrientationCountArgs } from "./OrientationCountArgs";
import { OrientationFindManyArgs } from "./OrientationFindManyArgs";
import { OrientationFindUniqueArgs } from "./OrientationFindUniqueArgs";
import { CreateOrientationArgs } from "./CreateOrientationArgs";
import { UpdateOrientationArgs } from "./UpdateOrientationArgs";
import { DeleteOrientationArgs } from "./DeleteOrientationArgs";
import { OrientationService } from "../orientation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Orientation)
export class OrientationResolverBase {
  constructor(
    protected readonly service: OrientationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "read",
    possession: "any",
  })
  async _orientationsMeta(
    @graphql.Args() args: OrientationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Orientation])
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "read",
    possession: "any",
  })
  async orientations(
    @graphql.Args() args: OrientationFindManyArgs
  ): Promise<Orientation[]> {
    return this.service.orientations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Orientation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "read",
    possession: "own",
  })
  async orientation(
    @graphql.Args() args: OrientationFindUniqueArgs
  ): Promise<Orientation | null> {
    const result = await this.service.orientation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Orientation)
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "create",
    possession: "any",
  })
  async createOrientation(
    @graphql.Args() args: CreateOrientationArgs
  ): Promise<Orientation> {
    return await this.service.createOrientation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Orientation)
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "update",
    possession: "any",
  })
  async updateOrientation(
    @graphql.Args() args: UpdateOrientationArgs
  ): Promise<Orientation | null> {
    try {
      return await this.service.updateOrientation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Orientation)
  @nestAccessControl.UseRoles({
    resource: "Orientation",
    action: "delete",
    possession: "any",
  })
  async deleteOrientation(
    @graphql.Args() args: DeleteOrientationArgs
  ): Promise<Orientation | null> {
    try {
      return await this.service.deleteOrientation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
