datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  email     String?  @unique
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Structure {
  createdAt DateTime   @default(now())
  employees Employee[]
  id        String     @id @default(cuid())
  updatedAt DateTime   @updatedAt
}

model Employee {
  birthCountry  String?
  birthDate     DateTime?
  birthName     String?
  birthPlace    String?
  contacts      Dial[]
  createdAt     DateTime         @default(now())
  domiciliation Domiciliation?
  email         String
  firstName     String
  id            Int              @id @default(autoincrement())
  lastName      String
  names         String?
  nationality   String?
  relocation    Transfer?        @relation(fields: [relocationId], references: [id])
  relocationId  String?          @unique
  sex           EnumEmployeeSex?
  structure     Structure?       @relation(fields: [structureId], references: [id])
  structureId   String?
  updatedAt     DateTime         @updatedAt
}

model Address {
  complement         String?
  country            String?
  createdAt          DateTime       @default(now())
  id                 String         @id @default(cuid())
  inseeCog           String?
  precision1         String?
  precision_2        String?
  principalAddresses Domiciliation?
  secondaryAddresses Transfer?
  town               String?
  updatedAt          DateTime       @updatedAt
}

model Dial {
  createdAt  DateTime     @default(now())
  employee   Employee?    @relation(fields: [employeeId], references: [id])
  employeeId Int?
  id         String       @id @default(cuid())
  kind       EnumDialKind
  updatedAt  DateTime     @updatedAt
  value      String
}

model Domiciliation {
  address     Address  @relation(fields: [addressId], references: [id])
  addressId   String   @unique
  createdAt   DateTime @default(now())
  employees   Employee @relation(fields: [employeesId], references: [id])
  employeesId Int      @unique
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
}

model Transfer {
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId String?   @unique
  createdAt DateTime  @default(now())
  employee  Employee?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
}

model Orientation {
  activity         String?
  createdAt        DateTime @default(now())
  geographicDomain String?
  id               String   @id @default(cuid())
  structureCode    String?
  structureLabel   String?
  updatedAt        DateTime @updatedAt
}

enum EnumEmployeeSex {
  Homme
  Femme
  Inconnu
}

enum EnumDialKind {
  TelephoneProfessionnel
  EmailPersonnel
  EmailProfessionnel
  TelephoneFix
  TelephoneMobile
}
